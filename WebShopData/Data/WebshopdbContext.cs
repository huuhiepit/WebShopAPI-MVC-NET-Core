// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WebShopData.Models;

namespace WebShopData.Data
{
    public partial class WebshopdbContext : DbContext
    {
        public WebshopdbContext()
        {
        }

        public WebshopdbContext(DbContextOptions<WebshopdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<ChiTietDonHang> ChiTietDonHang { get; set; }
        public virtual DbSet<ChiTietSanPham> ChiTietSanPham { get; set; }
        public virtual DbSet<DonHang> DonHang { get; set; }
        public virtual DbSet<KhachHang> KhachHang { get; set; }
        public virtual DbSet<KhuyenMai> KhuyenMai { get; set; }
        public virtual DbSet<MauSac> MauSac { get; set; }
        public virtual DbSet<SanPham> SanPham { get; set; }
        public virtual DbSet<Size> Size { get; set; }
        public virtual DbSet<TheLoai> TheLoai { get; set; }
        public virtual DbSet<ViewCtdonHang> ViewCtdonHang { get; set; }
        public virtual DbSet<ViewCtsanPham> ViewCtsanPham { get; set; }
        public virtual DbSet<ViewDoanhThu> ViewDoanhThu { get; set; }
        public virtual DbSet<ViewDonHang> ViewDonHang { get; set; }
        public virtual DbSet<ViewLichSuMuaHang> ViewLichSuMuaHang { get; set; }
        public virtual DbSet<ViewSanPham> ViewSanPham { get; set; }
        public virtual DbSet<ViewSanPhamBanChay> ViewSanPhamBanChay { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Admin>(entity =>
            {
                entity.HasKey(e => e.IdAdmin);

                entity.Property(e => e.IdAdmin).HasColumnName("idAdmin");

                entity.Property(e => e.DiaChi)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.HovaTen)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.NgayTao).HasColumnType("date");

                entity.Property(e => e.PassWord)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Sdt)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SDT");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChiTietDonHang>(entity =>
            {
                entity.HasKey(e => e.IdCtdh);

                entity.Property(e => e.IdCtdh).HasColumnName("idCTDH");

                entity.Property(e => e.IdCtsp).HasColumnName("idCTSP");

                entity.Property(e => e.IdDonHang).HasColumnName("idDonHang");

                entity.HasOne(d => d.IdCtspNavigation)
                    .WithMany(p => p.ChiTietDonHang)
                    .HasForeignKey(d => d.IdCtsp)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChiTietDonHang_ChiTietSanPham");

                entity.HasOne(d => d.IdDonHangNavigation)
                    .WithMany(p => p.ChiTietDonHang)
                    .HasForeignKey(d => d.IdDonHang)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChiTietDonHang_DonHang");
            });

            modelBuilder.Entity<ChiTietSanPham>(entity =>
            {
                entity.HasKey(e => e.IdCtsp);

                entity.Property(e => e.IdCtsp).HasColumnName("idCTSP");

                entity.Property(e => e.IdMauSac).HasColumnName("idMauSac");

                entity.Property(e => e.IdSanPham).HasColumnName("idSanPham");

                entity.Property(e => e.IdSize).HasColumnName("idSize");

                entity.Property(e => e.ImageUrl)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("Image_URL")
                    .HasDefaultValueSql("(N' ')");

                entity.HasOne(d => d.IdMauSacNavigation)
                    .WithMany(p => p.ChiTietSanPham)
                    .HasForeignKey(d => d.IdMauSac)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChiTietSanPham_MauSac");

                entity.HasOne(d => d.IdSanPhamNavigation)
                    .WithMany(p => p.ChiTietSanPham)
                    .HasForeignKey(d => d.IdSanPham)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChiTietSanPham_SanPham");

                entity.HasOne(d => d.IdSizeNavigation)
                    .WithMany(p => p.ChiTietSanPham)
                    .HasForeignKey(d => d.IdSize)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChiTietSanPham_Size");
            });

            modelBuilder.Entity<DonHang>(entity =>
            {
                entity.HasKey(e => e.IdDonHang);

                entity.Property(e => e.IdDonHang).HasColumnName("idDonHang");

                entity.Property(e => e.DiaChi)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.IdKhachHang).HasColumnName("idKhachHang");

                entity.Property(e => e.NgayDatHang).HasColumnType("date");

                entity.Property(e => e.Sdt)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("SDT")
                    .HasDefaultValueSql("(N' ')");

                entity.HasOne(d => d.IdKhachHangNavigation)
                    .WithMany(p => p.DonHang)
                    .HasForeignKey(d => d.IdKhachHang)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DonHang_KhachHang");
            });

            modelBuilder.Entity<KhachHang>(entity =>
            {
                entity.HasKey(e => e.IdKhachHang);

                entity.Property(e => e.IdKhachHang)
                    .HasColumnName("idKhachHang")
                    .HasComment("");

                entity.Property(e => e.DiaChi)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.HovaTen)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.NgaySinh).HasColumnType("date");

                entity.Property(e => e.NgayTao).HasColumnType("date");

                entity.Property(e => e.PassWord)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.Sdt)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SDT")
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N' ')");
            });

            modelBuilder.Entity<KhuyenMai>(entity =>
            {
                entity.HasKey(e => e.IdKhuyenMai);

                entity.Property(e => e.IdKhuyenMai).HasColumnName("idKhuyenMai");

                entity.Property(e => e.NgayBatDau).HasColumnType("date");

                entity.Property(e => e.NgayKetThuc).HasColumnType("date");

                entity.Property(e => e.TenKhuyenMai)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("(N' ')");
            });

            modelBuilder.Entity<MauSac>(entity =>
            {
                entity.HasKey(e => e.IdMauSac);

                entity.Property(e => e.IdMauSac).HasColumnName("idMauSac");

                entity.Property(e => e.TenMauSac)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N' ')");
            });

            modelBuilder.Entity<SanPham>(entity =>
            {
                entity.HasKey(e => e.IdSanPham);

                entity.Property(e => e.IdSanPham).HasColumnName("idSanPham");

                entity.Property(e => e.IdTheLoai).HasColumnName("idTheLoai");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.NgayTao).HasColumnType("date");

                entity.Property(e => e.TenSp)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("TenSP")
                    .HasDefaultValueSql("(N' ')");

                entity.HasOne(d => d.IdTheLoaiNavigation)
                    .WithMany(p => p.SanPham)
                    .HasForeignKey(d => d.IdTheLoai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SanPham_TheLoai");
            });

            modelBuilder.Entity<Size>(entity =>
            {
                entity.HasKey(e => e.IdSize);

                entity.Property(e => e.IdSize).HasColumnName("idSize");

                entity.Property(e => e.TenSize)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N' ')");
            });

            modelBuilder.Entity<TheLoai>(entity =>
            {
                entity.HasKey(e => e.IdTheLoai);

                entity.Property(e => e.IdTheLoai).HasColumnName("idTheLoai");

                entity.Property(e => e.TenTheLoai)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("(N' ')");
            });

            modelBuilder.Entity<ViewCtdonHang>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_CTDonHang");

                entity.Property(e => e.IdCtdh).HasColumnName("idCTDH");

                entity.Property(e => e.IdDonHang).HasColumnName("idDonHang");

                entity.Property(e => e.IdMauSac).HasColumnName("idMauSac");

                entity.Property(e => e.IdSanPham).HasColumnName("idSanPham");

                entity.Property(e => e.IdSize).HasColumnName("idSize");

                entity.Property(e => e.ImageUrl)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("Image_URL");

                entity.Property(e => e.TenMauSac)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TenSize)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TenSp)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("TenSP");
            });

            modelBuilder.Entity<ViewCtsanPham>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_CTSanPham");

                entity.Property(e => e.IdCtsp).HasColumnName("idCTSP");

                entity.Property(e => e.IdMauSac).HasColumnName("idMauSac");

                entity.Property(e => e.IdSanPham).HasColumnName("idSanPham");

                entity.Property(e => e.IdSize).HasColumnName("idSize");

                entity.Property(e => e.ImageUrl)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("Image_URL");

                entity.Property(e => e.TenMauSac)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TenSize)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TenSp)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("TenSP");
            });

            modelBuilder.Entity<ViewDoanhThu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_DoanhThu");

                entity.Property(e => e.IdDonHang).HasColumnName("idDonHang");

                entity.Property(e => e.NgayDatHang).HasColumnType("date");
            });

            modelBuilder.Entity<ViewDonHang>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_DonHang");

                entity.Property(e => e.DiaChi)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.HovaTen)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IdDonHang).HasColumnName("idDonHang");

                entity.Property(e => e.IdKhachHang).HasColumnName("idKhachHang");

                entity.Property(e => e.NgayDatHang).HasColumnType("date");

                entity.Property(e => e.Sdt)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("SDT");
            });

            modelBuilder.Entity<ViewLichSuMuaHang>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_LichSuMuaHang");

                entity.Property(e => e.IdCtsp).HasColumnName("idCTSP");

                entity.Property(e => e.IdDonHang).HasColumnName("idDonHang");

                entity.Property(e => e.IdKhachHang).HasColumnName("idKhachHang");

                entity.Property(e => e.ImageUrl)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("Image_URL");

                entity.Property(e => e.NgayDatHang).HasColumnType("date");

                entity.Property(e => e.TenMauSac)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TenSize)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TenSp)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("TenSP");

                entity.Property(e => e.TenTheLoai)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewSanPham>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_SanPham");

                entity.Property(e => e.IdSanPham).HasColumnName("idSanPham");

                entity.Property(e => e.IdTheLoai).HasColumnName("idTheLoai");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NgayTao).HasColumnType("date");

                entity.Property(e => e.TenSp)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("TenSP");

                entity.Property(e => e.TenTheLoai)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewSanPhamBanChay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_SanPhamBanChay");

                entity.Property(e => e.NgayDatHang).HasColumnType("date");

                entity.Property(e => e.TenSp)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("TenSP");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}